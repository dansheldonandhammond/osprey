{% comment %}
  Renders a product media gallery. Should be used with 'media-gallery.js'
  Also see 'product-media-modal'

  Accepts:
  - product: {Object} Product liquid object
  - variant_images: {Array} Product images associated with a variant
  - limit: {Number} (optional) When passed, limits the number of media items to render

  Usage:
  {% render 'product-media-gallery' %}
{% endcomment %}

{%- liquid
  if section.settings.hide_variants and variant_images.size == product.media.size
    assign single_media_visible = true
  endif

  if limit == 1
    assign single_media_visible = true
  endif

  assign media_count = product.media.size
  if section.settings.hide_variants and media_count > 1 and variant_images.size > 0
    assign media_count = media_count | minus: variant_images.size | plus: 1
  endif

  if media_count == 1 or single_media_visible
    assign single_media_visible_mobile = true
  endif

  if media_count == 0 or single_media_visible_mobile or section.settings.mobile_thumbnails == 'show' or section.settings.mobile_thumbnails == 'columns' and media_count < 3
    assign hide_mobile_slider = true
  endif

  if section.settings.media_size == 'large'
    assign media_width = 0.65
  elsif section.settings.media_size == 'medium'
    assign media_width = 0.55
  elsif section.settings.media_size == 'small'
    assign media_width = 0.45
  endif
-%}

<media-gallery
  id="MediaGallery-{{ section.id }}"
  role="region"
  {% if section.settings.enable_sticky_info %}
    class="product__column-sticky"
  {% endif %}
  aria-label="{{ 'products.product.media.gallery_viewer' | t }}"
  data-desktop-layout="{{ section.settings.gallery_layout }}"
>
  <div class="product-media-gallery-flex t-flex">
    {%- liquid
      assign is_not_limited_to_single_item = false
      if limit == null or limit > 1
        assign is_not_limited_to_single_item = true
      endif
    -%}

    {%- if is_not_limited_to_single_item
      and media_count > 1
      and section.settings.gallery_layout contains 'thumbnail'
      or section.settings.mobile_thumbnails == 'show'
    -%}
      <div class="gallery-thumbnails">
        <div class="thumbnail-slider-container">
          <button
            type="button"
            class="thumbnail-nav-button thumbnail-nav-prev"
            aria-label="{{ 'general.slider.previous_slide' | t }}"
          >
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </button>

          <div class="thumbnail-slider-wrapper" id="thumbnail-slider-{{ section.id }}">
            <ul class="thumbnail-list" id="thumbnail-list-{{ section.id }}">
              {%- capture sizes -%}
                (min-width: {{ settings.page_width }}px) calc(({{ settings.page_width | minus: 100 | times: media_width | round }} - 4rem) / 4),
                (min-width: 990px) calc(({{ media_width | times: 100 }}vw - 4rem) / 4),
                (min-width: 750px) calc((100vw - 15rem) / 8),
                calc((100vw - 8rem) / 3)
              {%- endcapture -%}

              {%- assign current_variant = product.selected_or_first_available_variant -%}
              {%- assign current_variant_sku = current_variant.sku -%}

              {%- for media in product.media -%}
                {%- liquid
                  assign filename = media.src | split: '/' | last
                  assign file_parts = filename | split: '_'
                  assign media_sku = file_parts[0] | replace: '[^0-9a-zA-Z\-]', ''

                  assign is_variant_media = false
                  if media_sku == current_variant_sku or media.alt contains current_variant_sku
                    assign is_variant_media = true
                  endif

                  if current_variant.featured_media and media.id == current_variant.featured_media.id
                    assign is_variant_media = true
                  endif
                -%}

                <li
                  class="thumbnail-item{% unless is_variant_media %} variant-hidden{% endunless %}"
                  data-media-id="{{ media.id }}"
                  data-variant-sku="{{ media_sku }}"
                  data-slide-index="{{ forloop.index0 }}"
                >
                  {%- if media.media_type == 'model' -%}
                    <span class="thumbnail__badge" aria-hidden="true">
                      <span class="svg-wrapper">
                        {{- 'icon-3d-model.svg' | inline_asset_content -}}
                      </span>
                    </span>
                  {%- elsif media.media_type == 'video' or media.media_type == 'external_video' -%}
                    <span class="thumbnail__badge" aria-hidden="true">
                      <span class="svg-wrapper">
                        {{- 'icon-play.svg' | inline_asset_content -}}
                      </span>
                    </span>
                  {%- endif -%}

                  <button
                    class="thumbnail-button{% if forloop.first %} active{% endif %}"
                    data-target="{{ section.id }}-{{ media.id }}"
                    aria-label="{%- if media.media_type == 'image' -%}{{ 'products.product.media.load_image' | t: index: forloop.index }}{%- elsif media.media_type == 'model' -%}{{ 'products.product.media.load_model' | t: index: forloop.index }}{%- elsif media.media_type == 'video' or media.media_type == 'external_video' -%}{{ 'products.product.media.load_video' | t: index: forloop.index }}{%- endif -%}"
                  >
                    {{
                      media.preview_image
                      | image_url: width: 416
                      | image_tag:
                        loading: 'lazy',
                        sizes: sizes,
                        widths: '54, 74, 104, 162, 208, 324, 416',
                        alt: media.alt
                    }}
                  </button>
                </li>
              {%- endfor -%}
            </ul>
          </div>

          <button
            type="button"
            class="thumbnail-nav-button thumbnail-nav-next"
            aria-label="{{ 'general.slider.next_slide' | t }}"
          >
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </button>
        </div>
      </div>
    {%- endif -%}

    <div class="gallery-viewer">
      <div class="main-image-container" id="main-image-container-{{ section.id }}">
        {%- for media in product.media -%}
          {%- liquid
            assign filename = media.src | split: '/' | last
            assign file_parts = filename | split: '_'
            assign media_sku = file_parts[0] | replace: '[^0-9a-zA-Z\-]', ''

            assign is_variant_media = false
            if media_sku == current_variant_sku or media.alt contains current_variant_sku
              assign is_variant_media = true
            endif

            if current_variant.featured_media and media.id == current_variant.featured_media.id
              assign is_variant_media = true
            endif
          -%}

          <div
            class="main-image-slide{% if forloop.first %} active{% endif %}{% unless is_variant_media %} variant-hidden{% endunless %}"
            id="Slide-{{ section.id }}-{{ media.id }}"
            data-media-id="{{ media.id }}"
            data-variant-sku="{{ media_sku }}"
            data-slide-index="{{ forloop.index0 }}"
          >
            {% render 'product-thumbnail',
              media: media,
              media_count: media_count,
              position: forloop.index,
              desktop_layout: section.settings.gallery_layout,
              mobile_layout: section.settings.mobile_thumbnails,
              loop: section.settings.enable_video_looping,
              modal_id: section.id,
              xr_button: true,
              media_width: media_width,
              media_fit: section.settings.media_fit,
              constrain_to_viewport: section.settings.constrain_to_viewport,
              lazy_load: false
            %}
          </div>
        {%- endfor -%}
      </div>

      <div class="gallery-controls">
        <button
          type="button"
          class="gallery-nav-button gallery-nav-prev"
          aria-label="{{ 'general.slider.previous_slide' | t }}"
        >
          <span class="svg-wrapper">
            {{- 'icon-caret.svg' | inline_asset_content -}}
          </span>
        </button>

        <div class="gallery-counter">
          <span class="current-counter">1</span>
          <span> / </span>
          <span class="total-counter">{{ media_count }}</span>
        </div>

        <button
          type="button"
          class="gallery-nav-button gallery-nav-next"
          aria-label="{{ 'general.slider.next_slide' | t }}"
        >
          <span class="svg-wrapper">
            {{- 'icon-caret.svg' | inline_asset_content -}}
          </span>
        </button>
      </div>
    </div>
  </div>

  <style>
    .product-media-gallery-flex {
      display: flex;
      gap: 1rem;
      align-items: flex-start;
    }

    /* Thumbnail Gallery Styles */
    .gallery-thumbnails {
      flex-shrink: 0;
      width: 100px;
    }

    .thumbnail-slider-container {
      position: relative;
      height: 500px;
      display: flex;
      flex-direction: column;
    }

    .thumbnail-nav-button {
      background: #f8f8f8;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 8px;
      cursor: pointer;
      transition: background-color 0.2s;
      margin: 4px 0;
      z-index: 2;
    }

    .thumbnail-nav-button:hover {
      background: #e8e8e8;
    }

    .thumbnail-nav-prev .svg-wrapper {
      transform: rotate(-90deg);
    }

    .thumbnail-nav-next .svg-wrapper {
      transform: rotate(90deg);
    }

    .thumbnail-slider-wrapper {
      flex: 1;
      overflow: hidden;
      position: relative;
      user-select: none;
      cursor: grab;
    }

    .thumbnail-slider-wrapper:active {
      cursor: grabbing;
    }

    .thumbnail-list {
      display: flex;
      flex-direction: column;
      padding: 0;
      margin: 0;
      list-style: none;
      transition: transform 0.3s ease;
      gap: 12px;
    }

    .thumbnail-item {
      flex-shrink: 0;
    }

    .thumbnail-item.variant-hidden {
      display: none;
    }

    .thumbnail-button {
      width: 80px;
      height: 80px;
      border: 2px solid #e5e5e5;
      border-radius: 6px;
      overflow: hidden;
      background: none;
      padding: 0;
      cursor: pointer;
      transition: border-color 0.2s, transform 0.2s;
      display: block;
      position: relative;
    }

    .thumbnail-button:hover {
      border-color: #ccc;
      transform: scale(1.05);
    }

    .thumbnail-button.active {
      border-color: #000;
      border-width: 3px;
    }

    .thumbnail-button img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .thumbnail__badge {
      position: absolute;
      top: 4px;
      right: 4px;
      background: rgba(0, 0, 0, 0.7);
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
      z-index: 1;
    }

    /* Main Gallery Styles */
    .gallery-viewer {
      flex: 1;
      min-width: 0;
    }

    .main-image-container {
      position: relative;
      margin-bottom: 1rem;
    }

    .main-image-slide {
      display: none;
    }

    .main-image-slide.active {
      display: block;
    }

    .main-image-slide.variant-hidden {
      display: none !important;
    }

    .gallery-controls {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 1rem;
    }

    .gallery-nav-button {
      background: #f8f8f8;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 12px 16px;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .gallery-nav-button:hover {
      background: #e8e8e8;
    }

    .gallery-counter {
      font-size: 14px;
      color: #666;
      font-weight: 500;
    }

    /* Mobile Responsive */
    @media (max-width: 767px) {
      .product-media-gallery-flex {
        flex-direction: column;
      }

      .gallery-thumbnails {
        width: 100%;
        order: 2;
        margin-top: 1rem;
      }

      .thumbnail-slider-container {
        height: auto;
        flex-direction: row;
      }

      .thumbnail-slider-wrapper {
        flex: 1;
        margin: 0 8px;
      }

      .thumbnail-list {
        flex-direction: row;
        gap: 8px;
      }

      .thumbnail-nav-prev .svg-wrapper {
        transform: rotate(180deg);
      }

      .thumbnail-nav-next .svg-wrapper {
        transform: rotate(0deg);
      }

      .gallery-viewer {
        order: 1;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const gallery = document.getElementById('MediaGallery-{{ section.id }}');
      if (!gallery) return;

      const thumbnailList = gallery.querySelector('.thumbnail-list');
      const thumbnailWrapper = gallery.querySelector('.thumbnail-slider-wrapper');
      const thumbnailButtons = gallery.querySelectorAll('.thumbnail-button');
      const thumbnailItems = gallery.querySelectorAll('.thumbnail-item');
      const mainSlides = gallery.querySelectorAll('.main-image-slide');
      
      const thumbnailPrevBtn = gallery.querySelector('.thumbnail-nav-prev');
      const thumbnailNextBtn = gallery.querySelector('.thumbnail-nav-next');
      const galleryPrevBtn = gallery.querySelector('.gallery-nav-prev');
      const galleryNextBtn = gallery.querySelector('.gallery-nav-next');
      const currentCounter = gallery.querySelector('.current-counter');
      const totalCounter = gallery.querySelector('.total-counter');

      let currentSlideIndex = 0;
      let visibleThumbnails = [];
      let isDragging = false;
      let startY = 0;
      let scrollStart = 0;

      function updateVisibleMedia() {
        const selectedVariant = window.currentVariant || {{ product.selected_or_first_available_variant | json }};
        const variantSku = selectedVariant.sku;
        
        visibleThumbnails = [];
        let visibleIndex = 0;

        thumbnailItems.forEach((item, index) => {
          const mediaSku = item.dataset.variantSku;
          const shouldShow = !mediaSku || mediaSku === variantSku || mediaSku === '';
          
          if (shouldShow) {
            item.classList.remove('variant-hidden');
            item.dataset.visibleIndex = visibleIndex;
            visibleThumbnails.push(index);
            visibleIndex++;
          } else {
            item.classList.add('variant-hidden');
          }
        });

        mainSlides.forEach((slide, index) => {
          const mediaSku = slide.dataset.variantSku;
          const shouldShow = !mediaSku || mediaSku === variantSku || mediaSku === '';
          
          if (shouldShow) {
            slide.classList.remove('variant-hidden');
          } else {
            slide.classList.add('variant-hidden');
          }
        });

        if (totalCounter) {
          totalCounter.textContent = visibleThumbnails.length;
        }

        if (visibleThumbnails.length > 0) {
          showSlide(0, true);
        }
      }

      function showSlide(index, isRelativeToVisible = false) {
        let targetIndex = index;
        
        if (isRelativeToVisible && visibleThumbnails.length > 0) {
          targetIndex = visibleThumbnails[Math.min(index, visibleThumbnails.length - 1)];
        }

        // Update main slides
        mainSlides.forEach((slide, i) => {
          slide.classList.toggle('active', i === targetIndex);
        });

        // Update thumbnails
        thumbnailButtons.forEach((btn, i) => {
          btn.classList.toggle('active', i === targetIndex);
        });

        // Update counter
        if (currentCounter) {
          const visiblePosition = visibleThumbnails.indexOf(targetIndex) + 1;
          currentCounter.textContent = visiblePosition || 1;
        }

        currentSlideIndex = targetIndex;
      }

      function getVisibleSlideIndex(absoluteIndex) {
        return visibleThumbnails.indexOf(absoluteIndex);
      }

      function nextSlide() {
        const currentVisibleIndex = getVisibleSlideIndex(currentSlideIndex);
        const nextVisibleIndex = (currentVisibleIndex + 1) % visibleThumbnails.length;
        showSlide(nextVisibleIndex, true);
      }

      function prevSlide() {
        const currentVisibleIndex = getVisibleSlideIndex(currentSlideIndex);
        const prevVisibleIndex = currentVisibleIndex > 0 ? currentVisibleIndex - 1 : visibleThumbnails.length - 1;
        showSlide(prevVisibleIndex, true);
      }

      // Thumbnail click handlers
      thumbnailButtons.forEach((btn, index) => {
        btn.addEventListener('click', function(e) {
          e.preventDefault();
          showSlide(index);
        });
      });

      // Navigation button handlers
      if (galleryPrevBtn) {
        galleryPrevBtn.addEventListener('click', prevSlide);
      }

      if (galleryNextBtn) {
        galleryNextBtn.addEventListener('click', nextSlide);
      }

      if (thumbnailPrevBtn) {
        thumbnailPrevBtn.addEventListener('click', function() {
          const scrollAmount = 100;
          thumbnailList.style.transform = `translateY(${Math.min(0, getTransformY() + scrollAmount)}px)`;
        });
      }

      if (thumbnailNextBtn) {
        thumbnailNextBtn.addEventListener('click', function() {
          const maxScroll = -(thumbnailList.scrollHeight - thumbnailWrapper.clientHeight);
          const scrollAmount = 100;
          thumbnailList.style.transform = `translateY(${Math.max(maxScroll, getTransformY() - scrollAmount)}px)`;
        });
      }

      function getTransformY() {
        const transform = thumbnailList.style.transform;
        const match = transform.match(/translateY\\(([^)]+)\\)/);
        return match ? parseFloat(match[1]) : 0;
      }

      // Drag functionality for thumbnails
      function addDragFunctionality() {
        thumbnailWrapper.addEventListener('mousedown', startDrag);
        thumbnailWrapper.addEventListener('touchstart', startDrag, { passive: false });
        
        document.addEventListener('mousemove', drag);
        document.addEventListener('touchmove', drag, { passive: false });
        
        document.addEventListener('mouseup', endDrag);
        document.addEventListener('touchend', endDrag);
      }

      function startDrag(e) {
        isDragging = true;
        startY = e.type === 'mousedown' ? e.clientY : e.touches[0].clientY;
        scrollStart = getTransformY();
        thumbnailWrapper.style.cursor = 'grabbing';
        e.preventDefault();
      }

      function drag(e) {
        if (!isDragging) return;
        
        const currentY = e.type === 'mousemove' ? e.clientY : e.touches[0].clientY;
        const diff = currentY - startY;
        const newTransform = scrollStart + diff;
        
        const maxScroll = -(thumbnailList.scrollHeight - thumbnailWrapper.clientHeight);
        const clampedTransform = Math.min(0, Math.max(maxScroll, newTransform));
        
        thumbnailList.style.transform = `translateY(${clampedTransform}px)`;
        e.preventDefault();
      }

      function endDrag() {
        isDragging = false;
        thumbnailWrapper.style.cursor = 'grab';
      }

      // Keyboard navigation
      gallery.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
          e.preventDefault();
          prevSlide();
        } else if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
          e.preventDefault();
          nextSlide();
        }
      });

      // Variant change handler
      document.addEventListener('variant:change', function(event) {
        const variant = event.detail.variant;
        if (variant) {
          window.currentVariant = variant;
          updateVisibleMedia();
        }
      });

      // Initialize
      addDragFunctionality();
      updateVisibleMedia();
    });
  </script>
</media-gallery>

<div id="GalleryStatus-{{ section.id }}" class="visually-hidden" aria-live="polite" aria-atomic="true"></div>
