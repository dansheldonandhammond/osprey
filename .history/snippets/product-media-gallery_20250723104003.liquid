{% comment %}
  Renders a product media gallery. Should be used with 'media-gallery.js'
  Also see 'product-media-modal'

  Accepts:
  - product: {Object} Product liquid object
  - variant_images: {Array} Product images associated with a variant
  - limit: {Number} (optional) When passed, limits the number of media items to render

  Usage:
  {% render 'product-media-gallery' %}
{% endcomment %}

{%- liquid
  if section.settings.hide_variants and variant_images.size == product.media.size
    assign single_media_visible = true
  endif

  if limit == 1
    assign single_media_visible = true
  endif

  assign media_count = product.media.size
  if section.settings.hide_variants and media_count > 1 and variant_images.size > 0
    assign media_count = media_count | minus: variant_images.size | plus: 1
  endif

  if media_count == 1 or single_media_visible
    assign single_media_visible_mobile = true
  endif

  if media_count == 0 or single_media_visible_mobile or section.settings.mobile_thumbnails == 'show' or section.settings.mobile_thumbnails == 'columns' and media_count < 3
    assign hide_mobile_slider = true
  endif

  if section.settings.media_size == 'large'
    assign media_width = 0.65
  elsif section.settings.media_size == 'medium'
    assign media_width = 0.55
  elsif section.settings.media_size == 'small'
    assign media_width = 0.45
  endif
-%}

<media-gallery
  id="MediaGallery-{{ section.id }}"
  role="region"
  {% if section.settings.enable_sticky_info %}
    class="product__column-sticky"
  {% endif %}
  aria-label="{{ 'products.product.media.gallery_viewer' | t }}"
  data-desktop-layout="{{ section.settings.gallery_layout }}"
>
  <div class="product-media-gallery-flex">
    {%- liquid
      assign is_not_limited_to_single_item = false
      if limit == null or limit > 1
        assign is_not_limited_to_single_item = true
      endif
    -%}

    {%- if is_not_limited_to_single_item
      and media_count > 1
      and section.settings.gallery_layout contains 'thumbnail'
      or section.settings.mobile_thumbnails == 'show'
    -%}
      <div class="gallery-thumbnails">
        <!-- Top Arrow -->
        <button
          type="button"
          class="thumbnail-nav-arrow thumbnail-nav-up"
          aria-label="{{ 'general.slider.previous_slide' | t }}"
          style="display: none;"
        >
          <span class="svg-wrapper">
            {{- 'icon-caret.svg' | inline_asset_content -}}
          </span>
        </button>

        <!-- Thumbnail Container -->
        <div class="thumbnail-container" id="thumbnail-container-{{ section.id }}">
          <ul class="thumbnail-list" id="thumbnail-list-{{ section.id }}">
            {%- capture sizes -%}
              (min-width: {{ settings.page_width }}px) calc(({{ settings.page_width | minus: 100 | times: media_width | round }} - 4rem) / 4),
              (min-width: 990px) calc(({{ media_width | times: 100 }}vw - 4rem) / 4),
              (min-width: 750px) calc((100vw - 15rem) / 8),
              calc((100vw - 8rem) / 3)
            {%- endcapture -%}

            {%- assign current_variant = product.selected_or_first_available_variant -%}
            {%- assign current_variant_sku = current_variant.sku -%}

            {%- for media in product.media -%}
              {%- liquid
                assign filename = media.src | split: '/' | last
                assign file_parts = filename | split: '_'
                assign media_sku = file_parts[0] | replace: '[^0-9a-zA-Z\-]', ''
              -%}

              <li
                class="thumbnail-item"
                data-media-id="{{ media.id }}"
                data-slide-index="{{ forloop.index0 }}"
                thumbnail-sku="{{ media_sku }}"
                {% unless media_sku == current_variant_sku %}
                  style="display: none;"
                {% endunless %}
              >
                {%- if media.media_type == 'model' -%}
                  <span class="thumbnail__badge" aria-hidden="true">
                    <span class="svg-wrapper">
                      {{- 'icon-3d-model.svg' | inline_asset_content -}}
                    </span>
                  </span>
                {%- elsif media.media_type == 'video' or media.media_type == 'external_video' -%}
                  <span class="thumbnail__badge" aria-hidden="true">
                    <span class="svg-wrapper">
                      {{- 'icon-play.svg' | inline_asset_content -}}
                    </span>
                  </span>
                {%- endif -%}

                <button
                  class="thumbnail-button{% if forloop.first %} active{% endif %}"
                  data-target="{{ section.id }}-{{ media.id }}"
                  data-media-index="{{ forloop.index0 }}"
                  aria-label="{%- if media.media_type == 'image' -%}{{ 'products.product.media.load_image' | t: index: forloop.index }}{%- elsif media.media_type == 'model' -%}{{ 'products.product.media.load_model' | t: index: forloop.index }}{%- elsif media.media_type == 'video' or media.media_type == 'external_video' -%}{{ 'products.product.media.load_video' | t: index: forloop.index }}{%- endif -%}"
                >
                  {{
                    media.preview_image
                    | image_url: width: 416
                    | image_tag:
                      loading: 'lazy',
                      sizes: sizes,
                      widths: '54, 74, 104, 162, 208, 324, 416',
                      alt: media.alt
                  }}
                </button>
              </li>
            {%- endfor -%}
          </ul>
        </div>

        <!-- Bottom Arrow -->
        <button
          type="button"
          class="thumbnail-nav-arrow thumbnail-nav-down"
          aria-label="{{ 'general.slider.next_slide' | t }}"
          style="display: none;"
        >
          <span class="svg-wrapper">
            {{- 'icon-caret.svg' | inline_asset_content -}}
          </span>
        </button>
      </div>
    {%- endif -%}

    <div class="gallery-viewer">
      <div class="main-image-container" id="main-image-container-{{ section.id }}">
        {%- for media in product.media -%}
          <div
            class="main-image-slide{% if forloop.first %} active{% endif %}"
            id="Slide-{{ section.id }}-{{ media.id }}"
            data-media-id="{{ media.id }}"
            data-slide-index="{{ forloop.index0 }}"
          >
            {% render 'product-thumbnail',
              media: media,
              media_count: media_count,
              position: forloop.index,
              desktop_layout: section.settings.gallery_layout,
              mobile_layout: section.settings.mobile_thumbnails,
              loop: section.settings.enable_video_looping,
              modal_id: section.id,
              xr_button: true,
              media_width: media_width,
              media_fit: section.settings.media_fit,
              constrain_to_viewport: section.settings.constrain_to_viewport,
              lazy_load: false
            %}
          </div>
        {%- endfor -%}
      </div>
    </div>
  </div>

  <style>
    .product-media-gallery-flex {
      display: flex;
      gap: 1.5rem;
      align-items: flex-start;
    }

    /* Thumbnail Gallery Styles */
    .gallery-thumbnails {
      display: flex;
      flex-direction: column;
      width: 80px;
      flex-shrink: 0;
    }

    .thumbnail-nav-arrow {
      width: 80px;
      height: 40px;
      background: #f8f8f8;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 8px;
    }

    .thumbnail-nav-arrow:hover {
      background: #e8e8e8;
      border-color: #d0d0d0;
    }

    .thumbnail-nav-arrow:active {
      transform: scale(0.95);
    }

    .thumbnail-nav-up {
      margin-bottom: 8px;
    }

    .thumbnail-nav-down {
      margin-top: 8px;
      margin-bottom: 0;
    }

    .thumbnail-nav-up .svg-wrapper {
      transform: rotate(-90deg);
    }

    .thumbnail-nav-down .svg-wrapper {
      transform: rotate(90deg);
    }

    .thumbnail-container {
      height: 400px;
      overflow: hidden;
      position: relative;
      border: 1px solid #f0f0f0;
      border-radius: 6px;
      background: #fafafa;
    }

    .thumbnail-list {
      display: flex;
      flex-direction: column;
      padding: 8px;
      margin: 0;
      list-style: none;
      transition: transform 0.3s ease;
      gap: 8px;
    }

    .thumbnail-item {
      flex-shrink: 0;
      position: relative;
    }

    .thumbnail-button {
      width: 64px;
      height: 64px;
      border: 2px solid #e5e5e5;
      border-radius: 6px;
      overflow: hidden;
      background: none;
      padding: 0;
      cursor: pointer;
      transition: all 0.2s ease;
      display: block;
      position: relative;
    }

    .thumbnail-button:hover {
      border-color: #ccc;
      transform: scale(1.05);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .thumbnail-button.active {
      border-color: #000;
      border-width: 3px;
      box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);
    }

    .thumbnail-button img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .thumbnail__badge {
      position: absolute;
      top: 2px;
      right: 2px;
      background: rgba(0, 0, 0, 0.7);
      color: white;
      border-radius: 50%;
      width: 16px;
      height: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 8px;
      z-index: 1;
    }

    /* Main Gallery Styles */
    .gallery-viewer {
      flex: 1;
      min-width: 0;
    }

    .main-image-container {
      position: relative;
      min-height: 500px;
    }

    .main-image-slide {
      display: none;
    }

    .main-image-slide.active {
      display: block;
    }

    /* Mobile Responsive */
    @media (max-width: 767px) {
      .product-media-gallery-flex {
        flex-direction: column;
      }

      .gallery-thumbnails {
        width: 100%;
        order: 2;
        margin-top: 1rem;
        flex-direction: row;
        overflow-x: auto;
        gap: 8px;
      }

      .thumbnail-nav-arrow {
        display: none !important;
      }

      .thumbnail-container {
        height: auto;
        overflow-x: auto;
        border: none;
        background: transparent;
      }

      .thumbnail-list {
        flex-direction: row;
        padding: 0;
        gap: 8px;
      }

      .gallery-viewer {
        order: 1;
      }
    }

    /* Hide arrows initially */
    .thumbnail-nav-arrow {
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }

    .thumbnail-nav-arrow.visible {
      opacity: 1;
      pointer-events: auto;
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const gallery = document.getElementById('MediaGallery-{{ section.id }}');
      if (!gallery) return;

      const thumbnailList = gallery.querySelector('.thumbnail-list');
      const thumbnailContainer = gallery.querySelector('.thumbnail-container');
      const thumbnailButtons = gallery.querySelectorAll('.thumbnail-button');
      const thumbnailItems = gallery.querySelectorAll('.thumbnail-item');
      const mainSlides = gallery.querySelectorAll('.main-image-slide');

      const thumbnailUpBtn = gallery.querySelector('.thumbnail-nav-up');
      const thumbnailDownBtn = gallery.querySelector('.thumbnail-nav-down');

      const currentCounter = gallery.querySelector('.current-counter');
      const totalCounter = gallery.querySelector('.total-counter');

      let currentSlideIndex = 0;
      let scrollPosition = 0;
      const itemHeight = 72; // 64px + 8px gap

      function updateArrowVisibility() {
        if (!thumbnailUpBtn || !thumbnailDownBtn) return;

        const visibleItems = Array.from(thumbnailItems).filter((item) => getComputedStyle(item).display !== 'none');

        const maxScroll = Math.max(0, visibleItems.length * itemHeight - thumbnailContainer.clientHeight);

        if (maxScroll > 0) {
          thumbnailUpBtn.classList.toggle('visible', scrollPosition > 0);
          thumbnailDownBtn.classList.toggle('visible', scrollPosition < maxScroll);
        } else {
          thumbnailUpBtn.classList.remove('visible');
          thumbnailDownBtn.classList.remove('visible');
        }
      }

      function updateThumbnailScroll() {
        thumbnailList.style.transform = `translateY(-${scrollPosition}px)`;
        updateArrowVisibility();
      }

      function showSlide(index) {
        // Update main slides
        mainSlides.forEach((slide, i) => {
          slide.classList.toggle('active', i === index);
        });

        // Update thumbnails
        thumbnailButtons.forEach((btn, i) => {
          btn.classList.toggle('active', i === index);
        });

        // Update counter
        if (currentCounter) {
          const visibleIndex =
            Array.from(thumbnailItems)
              .filter((item) => getComputedStyle(item).display !== 'none')
              .findIndex((item) => item.dataset.slideIndex == index) + 1;
          currentCounter.textContent = visibleIndex || 1;
        }

        currentSlideIndex = index;

        // Auto-scroll thumbnails to keep active item visible
        const activeItem = thumbnailItems[index];
        if (activeItem && getComputedStyle(activeItem).display !== 'none') {
          const itemTop = index * itemHeight;
          const itemBottom = itemTop + itemHeight;
          const containerHeight = thumbnailContainer.clientHeight;

          if (itemTop < scrollPosition) {
            scrollPosition = itemTop;
            updateThumbnailScroll();
          } else if (itemBottom > scrollPosition + containerHeight) {
            scrollPosition = itemBottom - containerHeight;
            updateThumbnailScroll();
          }
        }
      }

      function getVisibleThumbnails() {
        return Array.from(thumbnailItems).filter((item) => getComputedStyle(item).display !== 'none');
      }

      function nextSlide() {
        const visibleThumbnails = getVisibleThumbnails();
        const currentVisibleIndex = visibleThumbnails.findIndex((item) => item.dataset.slideIndex == currentSlideIndex);

        if (currentVisibleIndex >= 0 && currentVisibleIndex < visibleThumbnails.length - 1) {
          const nextIndex = parseInt(visibleThumbnails[currentVisibleIndex + 1].dataset.slideIndex);
          showSlide(nextIndex);
        }
      }

      function prevSlide() {
        const visibleThumbnails = getVisibleThumbnails();
        const currentVisibleIndex = visibleThumbnails.findIndex((item) => item.dataset.slideIndex == currentSlideIndex);

        if (currentVisibleIndex > 0) {
          const prevIndex = parseInt(visibleThumbnails[currentVisibleIndex - 1].dataset.slideIndex);
          showSlide(prevIndex);
        }
      }

      function updateVisibleCount() {
        const visibleCount = getVisibleThumbnails().length;
        if (totalCounter) {
          totalCounter.textContent = visibleCount;
        }

        // Reset to first visible slide when variant changes
        const firstVisible = getVisibleThumbnails()[0];
        if (firstVisible) {
          const firstVisibleIndex = parseInt(firstVisible.dataset.slideIndex);
          showSlide(firstVisibleIndex);
        }

        // Reset scroll position and update arrows
        scrollPosition = 0;
        updateThumbnailScroll();
      }

      // Thumbnail click handlers
      thumbnailButtons.forEach((btn, index) => {
        btn.addEventListener('click', function (e) {
          e.preventDefault();
          showSlide(index);
        });
      });

      // Thumbnail navigation
      if (thumbnailUpBtn) {
        thumbnailUpBtn.addEventListener('click', function () {
          scrollPosition = Math.max(0, scrollPosition - itemHeight * 2);
          updateThumbnailScroll();
        });
      }

      if (thumbnailDownBtn) {
        thumbnailDownBtn.addEventListener('click', function () {
          const visibleItems = getVisibleThumbnails();
          const maxScroll = Math.max(0, visibleItems.length * itemHeight - thumbnailContainer.clientHeight);
          scrollPosition = Math.min(maxScroll, scrollPosition + itemHeight * 2);
          updateThumbnailScroll();
        });
      }

      // Keyboard navigation
      gallery.addEventListener('keydown', function (e) {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
          e.preventDefault();
          prevSlide();
        } else if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
          e.preventDefault();
          nextSlide();
        }
      });

      // Listen for variant changes from VariantSelects class
      const observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
            updateVisibleCount();
          }
        });
      });

      // Observe all thumbnail items for style changes
      thumbnailItems.forEach((item) => {
        observer.observe(item, { attributes: true, attributeFilter: ['style'] });
      });

      // Also listen for variant:change events if available
      document.addEventListener('variant:change', function (event) {
        setTimeout(() => {
          updateVisibleCount();
        }, 100);
      });

      // Initialize
      updateVisibleCount();
      showSlide(0);
    });
  </script>
</media-gallery>

<div id="GalleryStatus-{{ section.id }}" class="visually-hidden" aria-live="polite" aria-atomic="true"></div>
